USE GYMASTER
GO

CREATE PROCEDURE SP_INSERTSUBSCRIPTION
(
    @SUB_NAME VARCHAR(20),
    @DURATION VARCHAR(10),
    @PRICE MONEY
)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM SUBSCRIPTION WHERE SUB_NAME = @SUB_NAME)
    BEGIN
        RAISERROR('Subscription name already exists.', 16, 1);
        RETURN;
    END

    IF @PRICE <= 0
    BEGIN
        RAISERROR('Subscription price must be greater than zero.', 16, 1);
        RETURN;
    END

    IF @DURATION NOT IN ('Daily', 'Monthly', 'Yearly', 'Semestral')
    BEGIN
        RAISERROR('Invalid subscription duration.', 16, 1);
        RETURN;
    END

    INSERT INTO SUBSCRIPTION (SUB_NAME, DURATION, PRICE)
    VALUES (@SUB_NAME, @DURATION, @PRICE);

    SELECT SCOPE_IDENTITY() AS NEWSUBSCRIPTIONID;
END
GO

CREATE PROCEDURE SP_UPDATESUBSCRIPTION
(
    @SUB_ID SMALLINT,
    @SUB_NAME VARCHAR(20) = NULL,
    @DURATION VARCHAR(10) = NULL,
    @PRICE MONEY = NULL
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM SUBSCRIPTION WHERE SUB_ID = @SUB_ID)
    BEGIN
        RAISERROR('Subscription not found.', 16, 1);
        RETURN;
    END

    IF @SUB_NAME IS NOT NULL AND 
       EXISTS (SELECT 1 FROM SUBSCRIPTION WHERE SUB_NAME = @SUB_NAME AND SUB_ID != @SUB_ID)
    BEGIN
        RAISERROR('Subscription name already exists.', 16, 1);
        RETURN;
    END

    IF @PRICE IS NOT NULL AND @PRICE <= 0
    BEGIN
        RAISERROR('Subscription price must be greater than zero.', 16, 1);
        RETURN;
    END

    IF @DURATION IS NOT NULL AND @DURATION NOT IN ('Daily', 'Monthly', 'Yearly', 'Semestral')
    BEGIN
        RAISERROR('Invalid subscription duration.', 16, 1);
        RETURN;
    END

    UPDATE SUBSCRIPTION
    SET 
        SUB_NAME = COALESCE(@SUB_NAME, SUB_NAME),
        DURATION = COALESCE(@DURATION, DURATION),
        PRICE = COALESCE(@PRICE, PRICE)
    WHERE 
        SUB_ID = @SUB_ID;

    SELECT @@ROWCOUNT AS ROWSAFFECTED;
END
GO
