USE GYMASTER 
GO

CREATE PROCEDURE SP_INSERTMEMBER
(
    @MEMBER_FNAME VARCHAR(50),
    @MEMBER_LNAME VARCHAR(30),
    @EMAIL VARCHAR(50),
    @PHONE_NUMBER VARCHAR(15),
    @DATE_OF_BIRTH DATE,
    @PROGRAM_ID SMALLINT,
    @USER_ID SMALLINT
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM PROGRAM WHERE PROGRAM_ID = @PROGRAM_ID)
    BEGIN
        RAISERROR('Invalid Program ID.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM [USER] WHERE USER_ID = @USER_ID)
    BEGIN
        RAISERROR('Invalid User ID.', 16, 1);
        RETURN;
    END

    IF EXISTS (SELECT 1 FROM MEMBER WHERE EMAIL = @EMAIL)
    BEGIN
        RAISERROR('Email already exists.', 16, 1);
        RETURN;
    END

    IF DATEDIFF(YEAR, @DATE_OF_BIRTH, GETDATE()) < 16
    BEGIN
        RAISERROR('Member must be at least 16 years old.', 16, 1);
        RETURN;
    END

    INSERT INTO MEMBER 
    (MEMBER_FNAME, MEMBER_LNAME, EMAIL, PHONE_NUMBER, DATE_OF_BIRTH, PROGRAM_ID, USER_ID)
    VALUES 
    (@MEMBER_FNAME, @MEMBER_LNAME, @EMAIL, @PHONE_NUMBER, @DATE_OF_BIRTH, @PROGRAM_ID, @USER_ID);

    SELECT SCOPE_IDENTITY() AS NewMemberID;
END
GO

CREATE PROCEDURE SP_UPDATEMEMBER
(
    @MEMBER_ID SMALLINT,
    @MEMBER_FNAME VARCHAR(50) = NULL,
    @MEMBER_LNAME VARCHAR(30) = NULL,
    @EMAIL VARCHAR(50) = NULL,
    @PHONE_NUMBER VARCHAR(15) = NULL,
    @DATE_OF_BIRTH DATE = NULL,
    @PROGRAM_ID SMALLINT = NULL,
    @USER_ID SMALLINT = NULL
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM MEMBER WHERE MEMBER_ID = @MEMBER_ID)
    BEGIN
        RAISERROR('Member not found.', 16, 1);
        RETURN;
    END

    IF @PROGRAM_ID IS NOT NULL AND NOT EXISTS (SELECT 1 FROM PROGRAM WHERE PROGRAM_ID = @PROGRAM_ID)
    BEGIN
        RAISERROR('Invalid Program ID.', 16, 1);
        RETURN;
    END

    IF @USER_ID IS NOT NULL AND NOT EXISTS (SELECT 1 FROM [USER] WHERE USER_ID = @USER_ID)
    BEGIN
        RAISERROR('Invalid User ID.', 16, 1);
        RETURN;
    END

    IF @EMAIL IS NOT NULL AND 
       EXISTS (SELECT 1 FROM MEMBER WHERE EMAIL = @EMAIL AND MEMBER_ID != @MEMBER_ID)
    BEGIN
        RAISERROR('Email already exists.', 16, 1);
        RETURN;
    END

    IF @DATE_OF_BIRTH IS NOT NULL AND DATEDIFF(YEAR, @DATE_OF_BIRTH, GETDATE()) < 16
    BEGIN
        RAISERROR('Member must be at least 16 years old.', 16, 1);
        RETURN;
    END

    UPDATE MEMBER
    SET 
        MEMBER_FNAME = COALESCE(@MEMBER_FNAME, MEMBER_FNAME),
        MEMBER_LNAME = COALESCE(@MEMBER_LNAME, MEMBER_LNAME),
        EMAIL = COALESCE(@EMAIL, EMAIL),
        PHONE_NUMBER = COALESCE(@PHONE_NUMBER, PHONE_NUMBER),
        DATE_OF_BIRTH = COALESCE(@DATE_OF_BIRTH, DATE_OF_BIRTH),
        PROGRAM_ID = COALESCE(@PROGRAM_ID, PROGRAM_ID),
        USER_ID = COALESCE(@USER_ID, USER_ID)
    WHERE 
        MEMBER_ID = @MEMBER_ID;

    SELECT @@ROWCOUNT AS ROWSAFFECTED;
END
GO
